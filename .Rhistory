ifelse(DRUG == 2 & DOSE == 400, "T-400",
ifelse(DRUG == 2 & DOSE == 500, "T-500",
ifelse(DRUG == 2 & DOSE == 700, "T-700", as.factor(DRUG))))))))
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1 & DOSE == 500, "R-500",
ifelse(DRUG == 2 & DOSE == 300, "T-300",
ifelse(DRUG == 2 & DOSE == 400, "T-400",
ifelse(DRUG == 2 & DOSE == 500, "T-500",
ifelse(DRUG == 2 & DOSE == 700, "T-700", as.factor(DRUG)))))))
data_dose = data_cov %>%
select(ID, DRUG, DOSE, ARM)
data_pd = data %>%
filter(Model == 2) %>%
select(ID, DRUG, TIME = Time, PAR = DV, AE = side_effect) %>%
left_join(data_dose, by = c("ID", "DRUG")) %>%
group_by(ARM, TIME) %>%
mutate(
PAR = ifelse(PAR < 0, mean(PAR, na.rm = TRUE), PAR)
)
data_pd_delta = data_pd %>%
filter(TIME %in% c(0, 6)) %>%
pivot_wider(names_from = TIME, values_from = PAR, names_prefix = "PAR_") %>%
mutate(delta_log_PAR = log(PAR_0) - log(PAR_6)) %>%
select(-c("PAR_0", "PAR_6"))
data_pk = data %>%
filter(Model == 1) %>%
select(ID, DRUG, TIME = Time, CONC = DV, AMT) %>%
left_join(data_dose, by = c("ID", "DRUG"))
ggplot(data = data_pd_delta, aes(x = ARM, y = delta_log_PAR)) +
geom_boxplot()
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1 & DOSE == 500, "R-500",
ifelse(DRUG == 2 & DOSE == 300, "T-300",
ifelse(DRUG == 2 & DOSE == 400, "T-400",
ifelse(DRUG == 2 & DOSE == 500, "T-500",
ifelse(DRUG == 2 & DOSE == 700, "T-700", as.factor(DRUG)))))))
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1 & DOSE == 500, "R-500",
ifelse(DRUG == 2 & DOSE == 300, "T-300",
ifelse(DRUG == 2 & DOSE == 400, "T-400",
ifelse(DRUG == 2 & DOSE == 500, "T-500",
ifelse(DRUG == 2 & DOSE == 700, "T-700", as.factor(DRUG)))))))
data_dose = data_cov %>%
select(ID, DRUG, DOSE, ARM)
data_pd = data %>%
filter(Model == 2) %>%
select(ID, DRUG, TIME = Time, PAR = DV, AE = side_effect) %>%
left_join(data_dose, by = c("ID", "DRUG")) %>%
group_by(ARM, TIME) %>%
mutate(
PAR = ifelse(PAR < 0, mean(PAR, na.rm = TRUE), PAR)
)
data_pd_delta = data_pd %>%
filter(TIME %in% c(0, 6)) %>%
pivot_wider(names_from = TIME, values_from = PAR, names_prefix = "PAR_") %>%
mutate(delta_log_PAR = log(PAR_0) - log(PAR_6)) %>%
select(-c("PAR_0", "PAR_6"))
data_pk = data %>%
filter(Model == 1) %>%
select(ID, DRUG, TIME = Time, CONC = DV, AMT) %>%
left_join(data_dose, by = c("ID", "DRUG"))
ggplot(data = data_pd_delta, aes(x = ARM, y = delta_log_PAR)) +
geom_boxplot()
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1, 1,
ifelse(DOSE == 300, 2,
ifelse(DOSE == 400, 3,
ifelse(DOSE == 500, 4, 5)))),
ARM = factor(ARM, labels = c("R-500mg", "T-300mg", "T-400mg", "T-500mg", "T-700mg"))
)
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1, 1,
ifelse(DOSE == 300, 2,
ifelse(DOSE == 400, 3,
ifelse(DOSE == 500, 4, 5)))),
ARM = as.factor(ARM, labels = c("R-500mg", "T-300mg", "T-400mg", "T-500mg", "T-700mg"))
)
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1, 1,
ifelse(DOSE == 300, 2,
ifelse(DOSE == 400, 3,
ifelse(DOSE == 500, 4, 5)))),
ARM = (ARM, labels = c("R-500mg", "T-300mg", "T-400mg", "T-500mg", "T-700mg"))
)
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1, 1,
ifelse(DOSE == 300, 2,
ifelse(DOSE == 400, 3,
ifelse(DOSE == 500, 4, 5)))),
ARM = ARM, labels = c("R-500mg", "T-300mg", "T-400mg", "T-500mg", "T-700mg"))
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1, 1,
ifelse(DOSE == 300, 2,
ifelse(DOSE == 400, 3,
ifelse(DOSE == 500, 4, 5)))),
ARM = ARM, labels = c("R-500mg", "T-300mg", "T-400mg", "T-500mg", "T-700mg"))
data_cov = data %>%
filter(!is.na(AMT)) %>%
select(ID, DRUG, DOSE = AMT, AE = side_effect, AGE, FEMALE, HT, WT) %>%
mutate(
ARM = ifelse(DRUG == 1, 1,
ifelse(DOSE == 300, 2,
ifelse(DOSE == 400, 3,
ifelse(DOSE == 500, 4, 5)))),
ARM = as.factor(ARM, labels = c("R-500mg", "T-300mg", "T-400mg", "T-500mg", "T-700mg")))
cbind(sum_fit$coefficients,confint(fit, level = .95))
fit = lm(delta_log_PAR ~ ARM, data = data_pd_delta)
sum_fit = summary(fit)
cbind(sum_fit$coefficients,confint(fit, level = .95))
# Multivaraite Linear Regression - delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT, data = data_amp)
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + WT, data = data_amp)
summary(mulvar_lm1)
# Multivaraite Linear Regression - delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT, data = data_amp)
summary(mulvar_lm1)
mulvar_lm2 = lm(delta_log_PAR ~ cmax + HT, data = data_amp)
summary(mulvar_lm2)
# Multivaraite Linear Regression - delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT, data = data_amp)
# Multivaraite Linear Regression - delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT, data = data_amp)
summary(mulvar_lm1)
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + WT, data = data_amp)
summary(mulvar_lm1)
mulvar_lm2 = lm(delta_log_PAR ~ cmax + AGE + FEMALE + WT + HT, data = data_amp)
summary(mulvar_lm2)
mulvar_lm2 = lm(delta_log_PAR ~ cmax + HT, data = data_amp)
summary(mulvar_lm2)
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + WT, data = data_amp)
summary(mulvar_lm1)
# Multivaraite Linear Regression - delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + AGE + FEMALE + WT + HT, data = data_amp)
summary(mulvar_lm1)
mulvar_lm1 = lm(delta_log_PAR ~ DOSE + WT, data = data_amp)
summary(mulvar_lm1)
mulvar_lm2 = lm(delta_log_PAR ~ cmax + AGE + FEMALE + WT + HT, data = data_amp)
summary(mulvar_lm2)
mulvar_lm2 = lm(delta_log_PAR ~ cmax + HT, data = data_amp)
summary(mulvar_lm2)
# Multivaraite Linear Regression - delta_log_PAR ~ auclast + AGE + FEMALE + WT + HT
mulvar_lm3 = lm(delta_log_PAR ~ auclast + AGE + FEMALE + WT + HT, data = data_amp)
summary(mulvar_lm3)
mulvar_lm3 = lm(delta_log_PAR ~ auclast + HT, data = data_amp)
summary(mulvar_lm3)
# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
# Examination project in R
# Author: Qusai Samara
# Email: qusai.samara.9370@student.uu.se
# Submission date:2023-11-27
# Version: 1
# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
rm(list = ls())
getwd()
library(readr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(GGally)
#Import data files on computer as objects in R
dir <- "C:/Users/Asus/OneDrive/Desktop/R-course/Exam/"
run_in <- 'BPI889_PK_11.csv'
pat <- 'BPI889_SNP_11.txt'
run_in_path <- paste(dir, run_in, sep = '')
pat_path <- paste(dir, pat, sep = '')
data_pk <- read.csv(file = run_in_path, header = T,as.is = T)
data_SNP <- read.table(file = pat_path, header = T, as.is = T)
#Data Management
##data_PK
###changing column names
colnames(data_pk) <- c("ID","0.15","0.3","0.5","0.75","1","1.5","2",
"2.5","3","4","5","6","8","12","24","Sex",
"Weight (kg)","Height (cm)","Age (years)")
###transfer data to long form
data_pk$Sex <- recode_factor(data_pk$Sex, F = "Female", M = "Male")
data_pk$ID <- sub(x = data_pk$ID,pattern = "pat",replacement = "")
data_pk$ID <- as.numeric(x = data_pk$ID)
data_pk$ID <- as.numeric(x = data_pk$ID)
data_pk <- data_pk[order(data_pk$ID),]
tidy_pk <- gather(data = data_pk, key = "Time (h)", value = "conc (mg/L)",-"ID", -"Sex",
-"Weight (kg)", -"Height (cm)", -"Age (years)")
###making data numeric in time and conc
tidy_pk$`Time (h)` <- as.numeric(tidy_pk$Time)
tidy_pk$`conc (mg/L)` <- as.numeric(tidy_pk$`conc (mg/L)`)
###adding and calculating TBW:
tidy_pk$`TBW (L)` <- c(NA)
TBW_F <-  function(hight,weight) {round(-2.097 + 0.1067 * hight + 0.2466 * weight)}
TBW_M <- function(age,hight, weight) {round(2.447 - 0.09156*age + 0.1074*hight +
0.3362*weight)}
tidy_pk %<>%
group_by(ID) %>%
mutate(
`TBW (L)` = as.numeric(if_else(Sex == "Female", TBW_F(`Height (cm)`, `Weight (kg)`),
TBW_M(`Age (years)`, `Height (cm)`, `Weight (kg)`))),
TBW_cat = as.factor(if_else(`TBW (L)` > 40, "High", "Low")) )
## data_SNP
data_SNP[,] <- lapply(data_SNP[,],factor)
levels(data_SNP[,])
levels(data_SNP$T134A) <- c("wildtype","heterogeneous","homogenous")
levels(data_SNP$A443G) <- c("wildtype","heterogeneous","homogenous")
levels(data_SNP$G769C) <- c("wildtype","heterogeneous","homogenous")
levels(data_SNP$G955C) <- c("wildtype","heterogeneous","homogenous")
levels(data_SNP$A990C) <- c("wildtype","heterogeneous","homogenous")
data_SNP$ID <- rownames(data_SNP)
data_SNP$ID <- sub(x = data_SNP$ID,pattern = "pat", replacement = "")
data_SNP$ID <- as.numeric(data_SNP$ID)
## combine PK- and SNP-data into one object
data_com <- merge(tidy_pk,data_SNP,by = "ID")
data_com <- data_com[order(data_com$ID,data_com$`Time (h)`,data_com$`conc (mg/L)`),]
# calculate pk-parameters
## clean data from NA
data_com_clean <- na.omit(data_com)
## Cmax calc:
data_com_clean %<>%
group_by(ID) %>%
mutate(Cmax = max(`conc (mg/L)`))
## k, C0 calc :
data_com_clean %<>%
group_by(ID) %>%
mutate(Dose = 200)
data_com_clean$log_conc <- ifelse(data_com_clean$`Time (h)` >= 1 & data_com_clean$`Time (h)` <= 4 ,
log10(data_com_clean$`conc (mg/L)`),"")
data_com_clean$log_conc <- as.numeric(data_com_clean$log_conc)
data_com_clean %<>%
group_by(ID) %>%
mutate(k = as.numeric(lm(log_conc ~ `Time (h)`)$coefficients[2]))
data_com_clean %<>%
group_by(ID) %>%
mutate(C0 = as.numeric(10^(lm(log_conc ~ `Time (h)`)$coefficients[1])))
## t1/2 calc :
data_com_clean %<>%
group_by(ID) %>%
mutate("t1/2" = as.numeric(log(2)/-k))
## Vd calc :
data_com_clean %<>%
group_by(ID) %>%
mutate(Vd = as.numeric(Dose/C0))
## CL calc :
data_com_clean %<>%
group_by(ID) %>%
mutate(CL = as.numeric(-k*Vd))
## AUC calc :
data_com_clean %<>%
group_by(ID) %>%
mutate(AUC = as.numeric(sum((`conc (mg/L)` + lag(`conc (mg/L)`, default = 0)) *
(`Time (h)` - lag(`Time (h)`, default = 0)) / 2)) +
last(data_com_clean$`conc (mg/L)`)/last(data_com_clean$k))
# Numerically summary:
## Summary of all patients:
mean_values <- sapply(data_com_clean[, c("Cmax", "Vd", "AUC")], mean, na.rm = TRUE)
median_values <- sapply(data_com_clean[, c("Cmax", "Vd", "AUC")], median, na.rm = TRUE)
sd_values <- sapply(data_com_clean[, c("Cmax", "Vd", "AUC")], sd, na.rm = TRUE)
min_values <- sapply(data_com_clean[, c("Cmax", "Vd", "AUC")], min, na.rm = TRUE)
max_values <- sapply(data_com_clean[, c("Cmax", "Vd", "AUC")], max, na.rm = TRUE)
summary_data <- data.frame( Mean = mean_values, Median = median_values, SD = sd_values,
Range_min = min_values,Range_max = max_values)
# Graphical summary:
## spaghetti plot (conc vs time):
ggplot(data_com_clean, aes(x = data_com_clean$`Time (h)`, y = data_com_clean$`conc (mg/L)`,
group = ID, color = as.factor(ID))) +
geom_line() +
labs(title = "Spaghetti Plot (Concentrations vs Time)",
x = "Time (h)", y = "Concentration (mg/L)")
## scatter plot:
scatter_p <- data_com_clean %>%
select(ID,`Time (h)`,`conc (mg/L)`,AUC,Vd,Cmax) %>%
arrange(ID,data_com_clean$`Time (h)`,`conc (mg/L)`,AUC,Vd,Cmax)
GGally::ggpairs(scatter_p[,4:6])
## box-whiskers plots:
### Vd:
plot_SNP_Vd <- list()
cov_name <- names(data_com_clean)[11:15]
for (cov in cov_name) {
plot_SNP__Vd <- ggplot(data = data_com_clean, aes_string(x = cov, y = data_com_clean$Vd, fill = cov)) +
geom_boxplot(outlier.colour = "black", outlier.shape = 1, outlier.size = 1, notch = T) +
labs(title = paste("Mutation in", cov, "impact on Vd"), x = cov, y = "Vd") +
theme_bw()
plot_SNP_Vd[[cov]] <- plot_SNP__Vd
}
ggarrange(plotlist = plot_SNP_Vd, ncol = 2, nrow = 3)
### AUC:
plot_SNP_AUC <- list()
cov_name <- names(data_com_clean)[11:15]
for (cov in cov_name) {
plot_SNP__AUC <- ggplot(data = data_com_clean, aes_string(x = cov, y = data_com_clean$AUC, fill = cov)) +
geom_boxplot(outlier.colour = "blue", outlier.shape = 2, outlier.size = 1, notch = T) +
labs(title = paste("Mutation in", cov, "impact on AUC"), x = cov, y = "AUC") +
theme_classic()
plot_SNP_AUC[[cov]] <- plot_SNP__AUC
}
ggarrange(plotlist = plot_SNP_AUC, ncol = 2, nrow = 3)
##correlations between Vd and TBW
ggplot(data = data_com_clean, aes(y = data_com_clean$`TBW (L)`, x = data_com_clean$Vd)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Linear regression line
labs(title = "Scatter Plot with Linear Regression", x = "Vd", y = "TBW") +
theme_classic()
# Statistical testing
## Perform an ANOVA of AUC and Cmax for the five SNPs:
model_AUC <- aov(data = data_com_clean, AUC ~ T134A + A443G + G769C + G955C + A990C)
summary(model_AUC)
model_Cmax <- aov(data = data_com_clean, Cmax ~ T134A + A443G + G769C + G955C + A990C)
summary(model_Cmax)
## Perform a t-test of Vd for the two categorical groups of   TBW:
t.test(data_com_clean$Vd ~ data_com_clean$TBW_cat)
ggarrange(plotlist = plot_SNP_AUC, ncol = 2, nrow = 3)
git clone https://github.com/QusaiASamara/Miltsim.git
gc()
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
required_packages
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
required_packages
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
View(get_mode)
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("Miltsim", "QusaiAsamara")
shiny::runGitHub("popkinr", "pnolain")
gc()
shiny::runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
View(rv)
rv
temp_file
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
runApp('C:/Users/Asus/OneDrive/Desktop/Miltsim')
setwd("C:/Users/Asus/OneDrive/Desktop/Miltsim")
shiny::runApp()
runApp()
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/create_allometric_dosing.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/create_allometric_WB_dosing.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/create_allometric_WB_dosing_adj.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/create_allometric_WB_dosing_adj.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/create_linear_dosing.R", echo=TRUE)
Rcpp::sourceCpp("helper_functions/Verrest_pk_model.cpp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/regimen_server.R", echo=TRUE)
runApp()
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/regimen_server.R", echo=TRUE)
runApp()
runApp()
runApp()
modalDialog(
title = "Upload & Edit Model",
size = "l",
easyClose = TRUE,
fluidPage(
tags$head(
tags$style(HTML("
.modal-lg {
width: 95% !important;
max-width: 1200px !important;
}
.file-input-wrapper {
display: flex;
flex-direction: column;
align-items: center;
padding: 15px;
border: 2px dashed #ccc;
border-radius: 5px;
transition: background-color 0.3s ease;
}
.file-input-wrapper:hover {
background-color: #f4f4f4;
}
"))
),
fluidRow(
# Left Column: Model Input
column(
width = 4,
shinydashboard::box(
width = NULL,
title = span(icon("file-code"), "Model Input"),
status = "info",
solidHeader = TRUE,
div(class = "file-input-wrapper",
fileInput("pk_model_file",
label = div(
icon("upload"),
tags$span("Drop or Upload Model Files")
),
multiple = TRUE,  # This is crucial for multiple file uploads
accept = c(".cpp", ".mod", ".ctl", ".lst", ".ext"),
placeholder = "Upload NONMEM or mrgsolve Control and Accompanying Files")
),
hr(),
selectInput("file_type",
label = span(icon("file-alt"), "File Format:"),
choices = c(
"mrgsolve (.cpp)" = "mrgsolve",
"NONMEM (.ctl/.mod & .ext)" = "nonmem"
),
width = "100%"
),
# Conditional action buttons
conditionalPanel(
condition = "input.file_type == 'nonmem'",
actionButton("convertModel",
label = span(icon("exchange-alt"), "Convert to mrgsolve"),
class = "btn-compile")
),
conditionalPanel(
condition = "input.file_type == 'mrgsolve'",
actionButton("viewModel",
label = span(icon("eye"), "View Model Code"),
class = "btn-compile")
),
hr(),
div(
style = "display: flex; justify-content: space-between; align-items: center;",
downloadButton("downloadModel",
label = span(icon("download"), "Download"),
class = "btn-compile")
)
)
),
# Right Column: Model Editor
column(
width = 8,
shinydashboard::box(
width = NULL,
title = span(icon("code"), "Model Editor"),
status = "info",
solidHeader = TRUE,
aceEditor(
outputId = "modelCodeEditor",
value = "",
mode = "c_cpp",
theme = "tomorrow",
height = "600px",
fontSize = 14,
autoScrollEditorIntoView = TRUE,
highlightActiveLine = TRUE,
showPrintMargin = FALSE
)
)
)
)
),
footer = tagList(
modalButton("Cancel"),
actionButton("saveModel", "Save Model", class = "btn-success")
)
)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
runApp()
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
runApp()
runApp()
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
source("C:/Users/Asus/OneDrive/Desktop/Miltsim/helper_functions/model_UI.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
